'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var pluginutils = require('@rollup/pluginutils');
var loader = require('graphql-tag/loader.js');
var os = require('os');

/* eslint-disable import/prefer-default-export */


/**
 * Convert CommonJS exports to ES modules exports
 * @param source Source code to convert
 * @returns The converted source code
 */
function toESModules(source) {
  if (typeof source !== 'string') {
    return source;
  }

  return replaceRequires(replaceModuleExports(source));
}

function replaceModuleExports(source) {
  return source
    .replace('module.exports = doc', 'export default doc')
    .replace(
      /module\.exports\["(.*)"] = oneQuery\(doc, "(.*)"\)/g,
      function (match, g1, g2) { return ("export const " + g1 + " = oneQuery(doc, \"" + g2 + "\")"); }
    );
}

function replaceRequires(source) {
  var imports = {};
  var index = 0;

  // replace a require statement with a variable
  var replaceSource = source.replace(/require\(([^)]+)\)/gi, function (match, path) {
    var replacePath = path.replace(/["']+/g, '');

    if (!imports[replacePath]) {
      index += 1;
      imports[replacePath] = "frgmt" + index;
    }

    return imports[replacePath];
  });

  // prepare import statements
  var importsOutput = Object.keys(imports)
    .map(function (path) { return ("import " + (imports[path]) + " from \"" + path + "\";"); })
    .join(os.EOL);

  return importsOutput + os.EOL + replaceSource;
}

function graphql(ref) {
  if ( ref === void 0 ) ref = {};
  var include = ref.include;
  var exclude = ref.exclude;

  // path filter
  var filter = pluginutils.createFilter(include, exclude);
  // only .graphql, .graphqls (schema), and .gql files
  var filterExt = /\.(graphqls?|gql)$/i;

  return {
    name: 'graphql',
    transform: function transform(source, id) {
      if (!filter(id)) { return null; }
      if (!filterExt.test(id)) { return null; }

      // XXX: this.cachable() in graphql-tag/loader
      var code = toESModules(
        loader.call(
          {
            cacheable: function cacheable() {}
          },
          source
        )
      );

      var map = { mappings: '' };

      return {
        code: code,
        map: map
      };
    }
  };
}

exports.default = graphql;
module.exports = Object.assign(exports.default, exports);
//# sourceMappingURL=index.js.map
